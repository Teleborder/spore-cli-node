#!/usr/bin/env node

var program = require('commander'),
    path = require('path'),
    readline = require('readline-sync'),
    colors = require('colors'),
    async = require('async'),
    pkg = require('../package.json'),
    resolvePath = require('../lib/utils/resolve_path'),
    Spore = require('../lib/spore'),
    spore = new Spore();

colors.setTheme({
  silly: 'rainbow',
  input: 'grey',
  verbose: 'cyan',
  prompt: 'grey',
  info: 'green',
  data: 'grey',
  help: 'cyan',
  warn: 'yellow',
  debug: 'blue',
  error: 'red'
});

process.title = program._name = "spore";

spore.on('sync', function () {
  info("Network connection detected, syncing offline activity...");
});

spore.on('syncError', function (err) {
  error(err);
});

spore.on('syncComplete', function () {
  info("Sync complete.");
});

program
  .version(pkg.version);

program
  .command('signup')
  .option("-e, --email <email>", "Email to sign up with")
  .option("-p, --password <password>", "Password to sign up with")
  .description("Create an account on your Spore Pod")
  .action(function (options) {

    var email = options.email || readline.question("Email: ".prompt),
        password = options.password || readline.question("Password: ".prompt, { hideEchoBack: true });

    if(!email || !password) return error(new Error("Email and password are required."));

    spore.signup(email, password, function (err, user) {
      if(err) return error(err);

      info("Account created for " + user.email + ".");
    });
  });

program
  .command('login')
  .option("-e, --email <email>", "Email to log in with")
  .option("-p, --password <password>", "Password to log in with")
  .description("Log in to your Spore Pod")
  .action(function (options) {

    login(options.email, options.password, function (user) {
      info("Logged in as " + user.email + ".");
    });

  });

program
  .command('init [dir]')
  .option('-n, --name <applicationName>', "Name of the application")
  .description("Create a new Spore")
  .action(function (dir, options) {
    ensureLogin(function () {
      var name = options.name;
      dir = resolvePath(process.cwd(), dir || ".");

      spore.createApp(dir, name, function (err, app) {
        if(err) return error(err);

        info(app.name + " created.");
      });
    });
  });

program
  .command('grant [email]')
  .option('-d, --directory <directory>', "Directory which contains the Spore")
  .option('-e, --env <environmentName>', "Name of environment to grant permissions for")
  .option('-a, --all', "Grant read access for all environments of this Spore")
  .description("Grant read permissions to a user for a Spore")
  .action(function (email, options) {
    loadApp(options.directory, function (app) {

      if(options.env) {
        app.grant(options.env, email, accessGranted(email, app.fullName() + "/" + options.env));

        return;
      }

      if(options.all) {
        app.grantAll(
          email,
          accessGranted(email, app.fullName() + "/" + app.envs.map(function (env) {
            return env.name;
          }))
        );

        return;
      }

      spore.defaultEnv(function (err, envName) {
        if(err) return error(err);

        app.grant(envName, email, accessGranted(email, app.fullName() + "/" + envName));
      });
    });
  });

function accessGranted(email, name) {
  return function (err) {
    if(err) return error(err);
    info("Read access to " + name + " granted for " + email);
  };
}

program
  .command('revoke [email]')
  .option('-d, --directory <directory>', "Directory which contains the Spore")
  .option('-e, --env <environmentName>', "Name of environment to revoke permissions for")
  .option('-a, --all', "Revoke read access for all environments of this Spore")
  .description("Revoke read permissions from a user for a Spore")
  .action(function (email, options) {
    loadApp(options.directory, function (app) {

      if(options.env) {
        app.revoke(options.env, email, accessRevoked(email, app.fullName() + "/" + options.env));

        return;
      }

      if(options.all) {
        app.revokeAll(
          email,
          accessRevoked(email, app.fullName() + "/" + app.envs.map(function (env) {
            return env.name;
          }))
        );

        return;
      }

      spore.defaultEnv(function (err, envName) {
        if(err) return error(err);

        app.revoke(envName, email, accessRevoked(email, app.fullName() + "/" + envName));
      });
    });
  });

function accessRevoked(email, name) {
  return function (err) {
    if(err) return error(err);
    info("Read access to " + name + " revoked for " + email);
  };
}

program
  .command('users')
  .option('-d, --directory <directory>', "Directory which contains the Spore")
  .option('-e, --env <environmentName>', "Name of environment to view users for")
  .option('-a, --all', "View users for all environments of the Spore")
  .description("List the users with read access for a Spore")
  .action(function (options) {
    loadApp(options.directory, function (app) {

      if(options.env) {
        app.users(options.env, function (err, users) {
          if(err) return error(err);

          printUsers(options.env, users);
        });

        return;
      }

      if(options.all) {
        app.allUsers(function (err, allUsers) {
          if(err) return error(err);

          printAllUsers(allUsers);
        });

        return;
      }

      spore.defaultEnv(function (err, envName) {
        if(err) return error(err);

        app.users(envName, function (err, users) {
          if(err) return error(err);

          printUsers(envName, users);
        });
      });
    });
  });

function printAllUsers(allUsers) {
  Object.keys(allUsers).forEach(function (envName) {
    printUsers(envName, allUsers[envName]);
  });
}

function printUsers(envName, users) {
  log(envName + ":");

  log("  " + users.join("\n  "));
}

program
  .command('set [key]')
  .option('-d, --directory <directory>', "Directory which contains the Spore")
  .option('-e, --env <environmentName>', "Name of environment to set the key for")
  .option('-p, --prompt', "Prompt to set the key for every environment")
  .option('-a, --all', "Set this key to the same value for all environments")
  .description("Set an environment variable for a Spore")
  .action(function (key, options) {
    loadApp(options.directory, function (app) {

      var value;

      if(options.env) {
        return setForEnv(app, options.env, key);
      }

      if(options.all) {

        var envNames = app.envs.map(function (env) {
          return env.name;
        }).join();

        console.log((envNames + ":").prompt);
        
        value = readline.question(("  " + key + "=").prompt);

        app.setAll(key, value, function (err) {
          if(err) return error(err);

          info(key + " set for " + app.name + "/" + envNames);
        });

        return;
      }

      if(options.prompt) {

        async.each(app.envs, function (env, next) {
          console.log((env.name + ":").prompt);

          var value = readline.question(("  " + key + "=").prompt);

          app.set(env.name, key, value, next);
        }, function (err) {
          if(err) return error(err);

          info(key + " set for " + app.name + "/" + app.envs.map(function (env) {
            return env.name;
          }));
        });

        return;
      }

      spore.defaultEnv(function (err, envName) {
        if(err) return error(err);

        setForEnv(app, envName, key);
      });
    });
  });

function setForEnv(app, envName, key) {
  console.log((envName + ":").prompt);
  
  value = readline.question(("  " + key + "=").prompt);

  app.set(envName, key, value, function (err) {
    if(err) return error(err);

    info(key + " set for " + app.name + "/" + envName);
  });
}

program
  .command('get [key]')
  .option('-d, --directory <directory>', "Directory which contains the Spore")
  .option('-e, --env <environmentName>', "Name of the environment to get the key from")
  .option('-a, --all', "Get a key's value for all environments")
  .description("Get environment variable(s) for a Spore")
  .action(function (key, options) {
    loadApp(options.directory, function (app) {

      if(options.env) return getForEnv(app, options.env, key);

      if(options.all) {
        app.envs.forEach(function (env) {
          getForEnv(app, env.name, key);
        });
        return;
      }

      spore.defaultEnv(function (err, envName) {
        if(err) return error(err);

        getForEnv(app, envName, key);
      });
    });
  });

function getForEnv(app, envName, key) {
  if(key) {
    app.get(envName, key, function (err, val) {
      if(err) return error(err);

      log(envName + ":");
      printKv(key, val, 2);
    });
    return;
  }

  app.get(envName, function (err, kv) {
    if(err) return error(err);

    log(envName + ":");
    printKvs(kv, 2);
  });
}

function printKvs(kv, tabs) {
  Object.keys(kv).forEach(function (key) {
    printKv(key, kv[key], tabs);
  });
}

function printKv(key, value, tabs) {
  tabs = tabs || 0;
  log(new Array(tabs + 1).join(' ') + key + "=" + value);
}

program
  .command('run [commands...]')
  .alias('exec')
  .option('-d, --directory <directory>', "Directory in which contains the Spore")
  .option('-e, --env <envName>', "Name of the environment")
  .description("Run a command with Spore environment variables loaded")
  .action(function (cmds, options) {
    loadApp(options.directory, function (app) {

      spore.defaultEnv(function (err, envName) {
        if(err) return error(err);

        app.run(cmds, options.env || envName, function (err, childProc) {
          if(err) return error(err);

          childProc.stdout.on('data', function (data) {
            process.stdout.write(data);
          });

          childProc.stderr.on('data', function (data) {
            process.stderr.write(data);
          });

          childProc.on('error', function (err) {
            error(err);
          });

          childProc.on('close', function (code) {
            process.exit(0);
          });
        });
      });
    });
  });

function loadApp(dir, callback) {
  ensureLogin(function () {
    spore.loadApp(resolvePath(process.cwd(), dir || '.'), function (err, app) {
      if(err) return error(err);

      callback(app);
    });
  });
}

function ensureLogin(callback) {
  spore.getKey(function (err, user) {
    if(err) return error(err);

    if(user) {
      return callback(user);
    }

    log("You need to log into your Spore Pod.");
    help("Create an account with `spore signup`");

    login(null, null, callback);
  });
}

function login(email, password, callback) {
  email = email || readline.question("Email: ".prompt);
  password = password || readline.question("Password: ".prompt, { hideEchoBack: true });

  if(!email || !password) return error(new Error("Email and password are required."));

  spore.login(email, password, function (err, user) {
    if(err) return error(err);

    callback(user);
  });
}

function log(message) {
  console.log(message.data);
}

function error(err) {
  console.error(err.message.error);
  console.log(err);
  console.log(err.stack);
}

function info(message) {
  console.info(message.info);
}

function help(message) {
  console.log(message.help);
}

function warn(message) {
  console.warn(message.warn);
}

if (!process.argv.slice(2).length) {
  program.help();
}

program.parse(process.argv);
